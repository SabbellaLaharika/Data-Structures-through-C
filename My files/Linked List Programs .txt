1.Node Structure 
------------------

#include <stdio.h>
#include <stdlib.h>
struct Node{
	int data;
	struct Node *next;
};
typedef struct Node NODE;
NODE *n1,*n2,*n3;
int main()
{
	n1 = (NODE *)malloc(sizeof(NODE));
	n2 = (NODE *)malloc(sizeof(NODE));
	n3 = (NODE *)malloc(sizeof(NODE));
	n1->data = 10;
	n2->data = 20;
	n3->data = 30;
	n1->next = n2;
	n2->next = n3;
	n3->next = NULL;
	printf("%d %d %d\n",n1->data,n2->data,n3->data);
	printf("%d %d %d\n",n1,n2,n3);    //prints addresses of them     
	printf("%d %d %d\n",n1,n1->data,n1->next);
	printf("%d %d %d\n",n2,n2->data,n2->next);
	printf("%d %d %d\n",n3,n3->data,n3->next);
	
}

2. Insert,delete and display operations 
--------------------------------------------  

#include <stdio.h>
#include <stdlib.h>
struct Node{
	int data;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head = NULL ,*tail = NULL ,*temp,*NN,*res;         //NN = Next Node
void insert(NODE *NN);
NODE *delet();
void display();
int main()
{
	int ch,val;
	while(1)
	{
		printf("1.Insert\n2.Delete\n3.Display\n4.Exit :\n");
		scanf("%d",&ch);
		if(ch==1)
		{
			//insert
			scanf("%d",&val);
			NN = (NODE *)malloc(sizeof(NODE));
			NN->data = val;
			NN->next = NULL;
			insert(NN);
		}
		else if(ch==2)
		{
			//delete
			res = delet();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==3)
		{ 
		    //display
			display();
		}
		else
		{
			break;
		}
	}
}
void insert(NODE *NN)
{
	if(head==NULL&&tail==NULL)
	{
		head=NN;
		tail=NN;
	}
	else
	{
		tail->next = NN;
		tail = NN;
	}
}
NODE *delet()
{
	if(head==NULL && tail == NULL)
	{
		return NULL;
	}
	else if(head == tail)
	{
		res = head;
		head = NULL;
		tail = NULL;
		return res;
	}
	else
	{
		temp=head;
		while(temp->next->next)
		{
			temp=temp->next;
		}
		res=tail;
		temp->next = NULL;
		tail = temp;
		return res;
	}
}
void display()
{
	if(head==NULL && tail==NULL)
	{
		printf("No Nodes\n");
	}
	else
	{
		temp = head;
		while(temp)
		{
			printf("%d %d %d \n",temp,temp->data,temp->next);
			temp=temp->next;
		}
		printf("\n");
	}
}

3.Singular Linked List
-----------------------

#include <stdio.h>
#include <stdlib.h>
struct Node{
	int data;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head = NULL ,*tail = NULL ,*temp,*NN,*res;         //NN = Next Node          Cur = current node
int pos;
void insert_at_tail(NODE *NN);
NODE *delet_at_tail();
void display();
void insert_at_head(NODE *NN);
NODE *delet_at_head();
void reverseLL();
void insert_by_position(NODE *NN,int pos);
NODE *delet_by_position();
int main()
{
	int ch,val;
	while(1)
	{
		printf("1.Insert at tail\n2.Delete at tail\n3.Display\n4.Insert at head\n5.Delete at head\n6.Reverse LL\n7.Insert by position\n8.Delete by position\n9.Get head\n10.Get tail\n11.Exit:\n");
		scanf("%d",&ch);
		if(ch==1)
		{
			//insert at tail
			scanf("%d",&val);
			NN = (NODE *)malloc(sizeof(NODE));
			NN->data = val;
			NN->next = NULL;
			insert_at_tail(NN);
		}
		else if(ch==2)
		{
			//delete at tail
			res = delet_at_tail();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==3)
		{ 
		    //display
			display();
		}
		else if(ch==4)
		{
		    //insert at head
			scanf("%d",&val);
			NN = (NODE *)malloc(sizeof(NODE));
			NN->data = val;
			NN->next = NULL;
			insert_at_head(NN);	
		}
		else if(ch==5)
		{
			//delete at head
			res = delet_at_head();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==6)
		{
	        //Reverse
			reverseLL();	
		}
		else if(ch==7)
		{
			//Insert by position
			scanf("%d",&val);
			scanf("%d",&pos);
			NN = (NODE *)malloc(sizeof(NODE));
			NN->data = val;
			NN->next = NULL;
			insert_by_position(NN,pos);
		}
		else if(ch==8)
		{
			//Delete by position
			scanf("%d",&pos);
			res = delet_by_position();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==9)
		{
			//Get head
			printf("%d\n",head);
		}
		else if(ch==10)
		{
			//Get tail
			printf("%d\n",tail);
		}
		else
		{
			break;
		}
	}
}
void insert_at_tail(NODE *NN)
{
	if(head==NULL&&tail==NULL)
	{
		head=NN;
		tail=NN;
	}
	else
	{
		tail->next = NN;
		tail = NN;
	}
}
NODE *delet_at_tail()
{
	if(head==NULL && tail == NULL)
	{
		return NULL;
	}
	else if(head == tail)
	{
		res = head;
		head = NULL;
		tail = NULL;
		return res;
	}
	else
	{
		temp=head;
		while(temp->next->next)
		{
			temp=temp->next;
		}
		res=tail;
		temp->next = NULL;
		tail = temp;
		return res;
	}
}
void display()
{
	if(head==NULL && tail==NULL)
	{
		printf("No Nodes\n");
	}
	else
	{
		temp = head;
		while(temp)
		{
			printf("%d %d %d \n",temp,temp->data,temp->next);
			temp=temp->next;
		}
		printf("\n");
	}
}
void insert_at_head(NODE *NN)
{
	if(head==NULL && tail==NULL)
	{
		head==NN;
		tail==NN;
	}
	else
	{
		NN->next = head;
		head = NN;
	}
}
NODE *delet_at_head()
{
	if(head==NULL&&tail==NULL)
	{
		return NULL;
	}
	else if(head==tail)
	{
		res=head;
		head=NULL;
		tail=NULL;
		return res;
	}
	else
	{
		temp = head;
		head = head->next;
		temp->next = NULL;
		return temp;
	}
}
void reverseLL()
{
	NODE *prev = NULL,*next=NULL,*cur;
	if(head==NULL&&tail==NULL)
	{
		printf("No nodes\n");
	}
	else if(head==tail)
	{
		printf("No need since list contains single element\n");
	}
	else
	{
		tail = head;
		cur = head;
		while(cur)
		{
			next = cur->next;
			cur->next = prev;
			prev = cur;
			cur = next;
		}
		head = prev;
	}
}
void insert_by_position(NODE *NN,int pos)
{
	int p,flag=0;
	temp=head;
	p=1;
	while(p<pos-1)
	{
	    if(temp==NULL)
		{
			printf("Insertion is not possible");
			flag=1;
			break;
		}
		temp=temp->next;
		p++;
	}
	if(flag==0)
	{
		NN->next = temp->next;
	    temp->next = NN;
	}	
}
NODE *delet_by_position()
{
	int p,flag=0;
	if(head==NULL&&tail==NULL)
	{
		return NULL;
	}
	else
	{
		temp = head;
		p = 1;
		while(p<pos-1)
		{
			if(temp==NULL)
			{
				return NULL;
			}
			temp=temp->next;
			p++;
		}
		res = temp->next;
		temp->next=temp->next->next;
		res->next = NULL;
		return res;
	}
}

4.Circular Linked List
-------------------------

#include<stdio.h>
#include<stdlib.h>

struct Node{
	int data;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head=NULL,*tail=NULL,*temp,*NN,*res;

//create a new node
NODE * newnode(int val)
{
	NN=(NODE *)malloc(sizeof(NODE));
	NN->data=val;
	NN->next=NULL;
	return NN;		
}
void insert_at_head(NODE *NN)
{
	if(head==NULL && tail==NULL)
	{
		head=NN;
		tail=NN;
		head->next=head;
	}
	else
	{
		NN->next=head;
		head=NN;
		tail->next=head;
	}
}

void display()
{
	if(head==NULL && tail==NULL)
	{
		printf("No Nodes\n");
		return;
	}
	temp=head;
	while(temp->next!=head)
	{
		printf("%d %d %d\n",temp,temp->data,temp->next);
		temp=temp->next;
	}
	printf("%d %d %d\n",temp,temp->data,temp->next);
}
void insert_at_end(NODE *NN)
{
	if(head==NULL && tail==NULL)
	{
		head=NN;
		tail=NN;
		head->next=head;
	}
	else
	{
		tail->next=NN;
		tail=NN;
		tail->next=head;
	}
}

void insert_by_pos(NODE *NN,int pos)
{
	int p;
	temp=head;
	for(p=1;p<pos-1;p++)
	{
		if(temp->next==head)
		{
			printf("Insertion is not possible\n");
			return;
		}
		temp=temp->next;
	}
	NN->next=temp->next;
	temp->next=NN;
}
NODE* delete_at_head()
{
	if(head==NULL && tail==NULL)
	{
		return NULL;
	}
	if(head==tail)
	{
		res=head;
		head=NULL;
		tail=NULL;
		return res;
	}
	res=head;
	head=head->next;
	tail->next=head;
	res->next=NULL;
	return res;
}

NODE * delete_at_end()
{
	if(head==NULL && tail==NULL)
	{
		return NULL;
	}
	if(head==tail)
	{
		res=head;
		head=NULL;
		tail=NULL;
		return res;
	}
	temp=head;
	while(temp->next->next!=head)
	{
		temp=temp->next;
	}
	res=tail;
	temp->next=head;
	tail=temp;
	res->next=NULL;
	return res;
}
NODE * delete_by_pos(int pos)
{
	int p;
	temp=head;
	for(p=1;p<pos-1;p++)
	{
		if(temp->next==head)
		{
			printf("deletion is not possible\n");
			return NULL;
		}
		temp=temp->next;
	}
	res=temp->next;
	temp->next=res->next;
	res->next=NULL;
	return res;
}
int main()
{
	int ch,val,pos;
	while(1)
	{
		printf("1.insert at head\n2.insert at end\n3.insert by pos\n4.display\n5.delete at head\n6.delete at end\n7.delete by pos\n8.exit:");
		scanf("%d",&ch);
		if(ch==1)
		{
			//insert at head
			scanf("%d",&val);
			NN=newnode(val);
			insert_at_head(NN);
		}
		else if(ch==2)
		{
			//insert at end
			scanf("%d",&val);
			NN=newnode(val);
			insert_at_end(NN);
		}
		else if(ch==3)
		{
			//insert by pos
			scanf("%d",&val);
			scanf("%d",&pos);
			NN=newnode(val);
			insert_by_pos(NN,pos);
		}
		else if(ch==4)
		{
			//display
			display();
		}
		else if(ch==5)
		{
			//delete at head
			res=delete_at_head();
			if(res==NULL)
			{
				printf("No Nodes\n");
			}
			else
			{
				printf("%d\n",res->data);
				free(res);
			}
			
		}
		else if(ch==6)
		{
			//delete at end
			res=delete_at_end();
			if(res==NULL)
			{
				printf("No Nodes\n");
			}
			else
			{
				printf("%d\n",res->data);
				free(res);
			}
		}
		else if(ch==7)
		{
			//delete by pos
			scanf("%d",&pos);
			res=delete_by_pos(pos);
			if(res==NULL)
			{
				printf("No Nodes\n");
			}
			else
			{
				printf("%d\n",res->data);
				free(res);
			}
		}
		else
		{
			break;
		}
	}
}


5. Double Linked List
-----------------------

#include<stdio.h>
#include<stdlib.h>
struct Node{
	struct Node *prev;
	int data;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head = NULL, *tail = NULL, *temp,*NN,*res;
int pos;
NODE * newnode(int val);
void insert_at_head(NODE *NN);
void insert_at_tail(NODE *NN);
void insert_by_position(NODE *NN,int pos);
NODE *delet_at_head();
NODE *delet_at_tail();
NODE *delet_by_position();
void display_from_head_to_tail();
void display_from_tail_to_head();
int main()
{
	int ch,val;
	while(1)
	{
		printf("1.Insert at head\t2.Insert at tail\t3.Insert by position\t4.Delete at head\t5.Delete at tail\n6.Delete by position\t7.Display from head to tail\t8.Display from tail to head\t9.Exit:  ");
		scanf("%d",&ch);
		if(ch==1)
		{
			//Insert at head
			scanf("%d",&val);
			NN = newnode(val);
			insert_at_head(NN);
		}
		else if(ch==2)
		{
			//Insert at tail
			scanf("%d",&val);
			NN = newnode(val);
			insert_at_tail(NN);
		}
		else if(ch==3)
		{
			//Insert by position
			scanf("%d",&val);
			scanf("%d",&pos);
			NN = newnode(val);
			insert_by_position(NN,pos);
		}
		else if(ch==4)
		{
			//Delete at head
			res = delet_at_head();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==5)
		{
			//Delete at tail
			res = delet_at_tail();
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==6)
		{
			//Delete by position
			scanf("%d",&pos);
			res = delet_by_position(pos);
			if(res==NULL)
			{
			     printf("NO Nodes\n");	
			}	
			else
			{
				printf("%d",res->data);
				free(res);
			}
		}
		else if(ch==7)
		{
			//Display from head to tail
			display_from_head_to_tail();
		}
		else if(ch==8)
		{
			//Display from tail to head
			display_from_tail_to_head();
		}
		else
		{
			break;
		}
	}
}
NODE * newnode(int val)
{
	NN = (NODE *)malloc(sizeof(NODE));
	NN->data=val;
	NN->prev=NULL;
	NN->next=NULL;
	return NN;
}
void insert_at_head(NODE *NN)
{
	if(head==NULL&&tail==NULL)
	{
		head = NN;
		tail = NN;
	}
	else
	{
		NN->next=head;
		head->prev=NN;
		head=NN;
	}
}
void insert_at_tail(NODE *NN)
{
	if(head==NULL&&tail==NULL)
	{
		head = NN;
		tail = NN;
	}
	else
	{
		tail->next=NN;
		NN->prev=tail;
		tail=NN;
	}
}
void insert_by_position(NODE *NN,int pos)
{
	int p;
	if(head==NULL&&tail==NULL)
	{
		head = NN;
		tail = NN;
	}
	else
	{
		p = 1;
		temp=head;
		while(p<pos-1)
		{
			if(temp == NULL)
			{
				printf("Insertion is not possible\n");
				return;
			}
			temp = temp->next;
			p++;
		}
		NN->next = temp->next;
		NN->prev = temp;
		temp->next = NN;
	    NN->next->prev = NN;
	}
}
void display_from_head_to_tail()
{
	if(head==NULL&&tail==NULL)
	{
		printf("No nodes\n");
	}
	else
	{
		temp = head;
		while(temp)
		{
			printf("%d %d %d %d\n",temp,temp->prev,temp->data,temp->next);
			temp = temp->next;
		}
	}
}
void display_from_tail_to_head()
{
	if(head==NULL&&tail==NULL)
	{
		printf("No nodes\n");
	}
	else
	{
		temp = tail;
		while(temp)
		{
			printf("%d %d %d %d\n",temp,temp->prev,temp->data,temp->next);
			temp = temp->prev;
		}
	}
}
NODE *delet_at_head()
{
	if(head==NULL&&tail==NULL)
	{
		return NULL;
	}
	else if(head==tail)
	{
		res=head;
		head=NULL;
		tail=NULL;
		return res;
	}
	else
	{
		res = head;
		head = head->next;
		head->prev = NULL;
		res->next = NULL;
		return res;
	}
}
NODE *delet_at_tail()
{
	if(head==NULL&&tail==NULL)
	{
		return NULL;
	}
	else if(head==tail)
	{
		res=head;
		head=NULL;
		tail=NULL;
		return res;
	}
	else
	{
		res = tail;
		tail = tail->prev;
		tail->next = NULL;
		res->prev = NULL;
		return res;
	}
}
NODE *delet_by_position(int pos)
{
	int p;
	temp = head;
	for ( p = 1; p < pos-1; p++ )
	{
		if ( temp->next == head )
		{
			printf("Deletion is not possible\n");
			return NULL;
		}
		temp = temp->next;
	}
	res = temp->next;
	temp->next = temp->next->next;
	res->prev = temp;
	res->prev = NULL;
	res->next = NULL;
	return res;
}

6.Polynomial using Linked List
-------------------------------

#include<stdio.h>
#include<stdlib.h>
struct Node{
	int coef,pow;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head=NULL,*tail=NULL,*temp,*NN;
NODE * Newnode(int coef,int pow);
void insert(NODE * NN);
void display();
int main()
{
	int coef,pow;
	char ch='a';
	while(ch!='N')
	{
		scanf("%d%d",&coef,&pow);
		NN = Newnode(coef,pow);
		insert(NN);
		printf("Do you want to enter Y/N : ");
		scanf(" %c",&ch);
	}
	display();
}
NODE * Newnode(int coef,int pow)
{
	NN = (NODE *)malloc(sizeof(NODE));
	NN->coef = coef;
	NN->pow = pow;
	NN->next = NULL;
	return NN;
}
void insert(NODE * NN)
{
	if(head==NULL&&tail==NULL)
	{
		head = NN;
		tail = NN;
	}
	else
	{
		tail->next = NN;
		tail = NN;
	}
}
void display()
{
	temp = head;
	if(temp == NULL)
	{
		printf("No Nodes\n");
	}
	else
	{
		while(temp)
		{
		    if(temp->next!=NULL)
			printf("%dx^%d+",temp->coef,temp->pow);
			else
			printf("%dx^%d",temp->coef,temp->pow);
			temp = temp->next;
		}
	}
}

7.Polynomials using Linked lists with head and tail
-----------------------------------------------------

//To add two polynomials
#include<stdio.h>
#include<stdlib.h>
struct Node{
	int coef,pow;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head=NULL,*tail=NULL,*temp,*NN;
NODE * Newnode(int coef,int pow);
void insert(NODE * head,NODE * tail,NODE * NN);
void display(NODE * head);
int main()
{
	int coef,pow;
	char ch = 'a';
	while(ch!='N')
	{
		scanf("%d%d",&coef,&pow);
		NN = Newnode(coef,pow);
		insert(head,tail,NN);
		printf("Do you want to enter Y/N : ");
		scanf(" %c",&ch);
	}
	display(head);
}
NODE * Newnode(int coef,int pow)
{
	NN = (NODE *)malloc(sizeof(NODE));
	NN->coef = coef;
	NN->pow = pow;
	NN->next = NULL;
	return NN;
}
void insert(NODE * head,NODE * tail,NODE * NN)
{
	if(head==NULL&&tail==NULL)
	{
		head = NN;
		tail = NN;
	}
	else
	{
		tail->next = NN;
		tail = NN;
	}
}
void display(NODE * head)
{
	temp = head;
	if(temp == NULL)
	{
		printf("No Nodes\n");
	}
	else
	{
		while(temp)
		{
		    if(temp->next!=NULL)
			printf("%dx^%d+",temp->coef,temp->pow);
			else
			printf("%dx^%d",temp->coef,temp->pow);
		}
	}
}


8.Adding two polynomials
--------------------------

#include<stdio.h>
#include<stdlib.h>
struct Node {
	int coef,pow;
	struct Node *next;
};
typedef struct Node NODE;
NODE *head,*head1 = NULL, *head2 = NULL, *head3 = NULL;
NODE *temp,*temp1,*temp2,*temp3,*NN;
NODE * Newnode(int coef,int pow);
NODE *createpolynomial(NODE *head);
void display(NODE *head);
NODE *addpolynimial();
int main()
{
	head1 = createpolynomial(head1); 
	head2 = createpolynomial(head2);
	head3 = addpolynomial(head1,head2,head3);
	display(head1);
	display(head2);
	display(head3);
}
NODE *createpolynomial(NODE *head)
{
	int coef,pow;
	char ch = 'Y';
	while(ch!='N')
	{
		scanf("%d%d",&coef,&pow);
		NN = Newnode(coef,pow);
		if(head==NULL)
		{
			head = NN;
		}
		else
		{
			temp = head;
			while(temp->next)
			{
				temp = temp->next;
			}
			temp->next = NN;
		}
		printf("Do you want to enter(Y/N) : ");
		scanf(" %c",&ch);
	}
	display(head);
}
NODE * Newnode(int coef,int pow)
{
	NN = (NODE *)malloc(sizeof(NODE));
	NN->coef = coef;
	NN->pow = pow;
	NN->next = NULL;
	return NN;
}
void display(NODE *head)
{
	temp = head;
	{
		while(temp)
		{
		    if(temp->next!=NULL)
			printf("%dx^%d+",temp->coef,temp->pow);
			else
			printf("%dx^%d",temp->coef,temp->pow);
			temp = temp->next;
		}
		printf("\n");
	}
}
NODE *addpolynimial()
{
	temp1 = head1;
	temp2 = head2;
	while(temp1 && temp2)
	{
		NN = Newnode(0,0);
		if(head3==NULL)
		{
			head3 = NN;
		}
		else
		{
			temp = head3;
			while(temp->next)
			{
				temp = temp->next;
			}
			temp->next = NN;
		}
	}
	if(temp1->pow == temp2->pow)
    {
	    NN->coef = temp1->coef+temp2->coef;
	    NN->pow = temp1->pow;
	    temp1 = temp1->next;
	    temp2 = temp2->next;
    }
    else if
}

9.Sparks matrix
----------------

#include<stdio.h>
#include<stdlib.h>
struct Node{
	int row;
	int col;
	int val;
	struct Node * next;
};
typedef struct Node NODE;
NODE *head = NULL,*tail = NULL, *temp, *NN;
NODE * Newnode(int row,int col,int val);
void insert(NODE * NN);
void display(); 
int main()
{
	int mat[100][100],r,c,i,j;
	scanf("%d%d",&r,&c);
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			scanf("%d%d",&mat[i][j]);
		}
	}
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			if(mat[i][j]!=0)
			{
				NN = Newnode(i,j,mat[i][j]);
				insert(NN);
			}
		}
	}
	display();
}
NODE * Newnode(int row,int col,int val)
{
	NN = (NODE *)malloc(sizeof(NODE));
	NN->row = row;
	NN->col = col;
	NN->val = val;
	NN->next = NULL;
	return NN;
}
void insert(NODE * NN)
{
	if(head==NULL&&tail==NULL)
	{
		head=NN;
		tail=NN;
	}
	else
	{
		tail->next = NN;
		tail = NN;
	}
}
void display()
{
	if(head==NULL)
	{
		printf("No nodes\n");
	}
	else
	{
		temp = head;
		while(temp)
		{
			printf("%d %d %d\n",temp->row,temp->col,temp->val);
			temp=temp->next;
		}
	}
}

